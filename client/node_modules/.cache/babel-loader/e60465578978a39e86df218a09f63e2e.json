{"ast":null,"code":"var crypto = require('crypto');\n\nvar querystring = require('querystring');\n\nvar timestamp = require('unix-timestamp');\n\nvar nonce = require('nonce')();\n\nvar _ = require('lodash');\n/**\n * @constant {string}\n * @private\n */\n\n\nvar TOKEN_SENTINEL = 'T1==';\n/**\n * @typedef {Object} TokenData\n * @property {string} [session_id] An OpenTok Session ID\n * @property {number} [create_time] Creation time of token as unix timestamp (Default: now)\n * @property {number} [expire_time] Expiration time of token as unix timestamp (Default: one day\n * from now)\n * @property {number} [nonce] Arbitrary number used only once in a cryptographic communication\n * (Default: unique random number)\n * @property {string} [role='publisher'] \"publisher\" or \"subscriber\" \"moderator\"\n * @property {string} [connection_data] Arbitrary data to be made available in clients on the OpenTok Connection\n */\n\n/**\n * Encodes data for use as a token that can be used as the X-TB-TOKEN-AUTH header value in OpenTok REST APIs\n *\n * @exports opentok-token\n *\n * @param {TokenData} tokenData\n * @param {string} apiKey An OpenTok API Key\n * @param {string} apiSecret An OpenTok API Secret\n *\n * @returns {string} token\n */\n\nvar encodeToken = function (tokenData, apiKey, apiSecret) {\n  // Prevent mutating value passed in\n  tokenData = _.clone(tokenData);\n\n  _.defaults(tokenData, {\n    create_time: Math.round(timestamp.now()),\n    expire_time: Math.round(timestamp.now('1d')),\n    nonce: nonce(),\n    role: 'publisher'\n  });\n\n  var dataString = querystring.stringify(tokenData),\n      sig = signString(dataString, apiSecret),\n      decoded = new Buffer(\"partner_id=\" + apiKey + \"&sig=\" + sig + \":\" + dataString, 'utf8');\n  return TOKEN_SENTINEL + decoded.toString('base64');\n};\n/**\n * Creates an HMAC-SHA1 signature of unsigned data using the key\n *\n * @private\n *\n * @param {string} unsigned Data to be signed\n * @param {string} key Key to sign data with\n *\n * @returns {string} signature\n */\n\n\nvar signString = function (unsigned, key) {\n  var hmac = crypto.createHmac('sha1', key);\n  hmac.update(unsigned);\n  return hmac.digest('hex');\n};\n\nmodule.exports = encodeToken;","map":{"version":3,"names":["crypto","require","querystring","timestamp","nonce","_","TOKEN_SENTINEL","encodeToken","tokenData","apiKey","apiSecret","clone","defaults","create_time","Math","round","now","expire_time","role","dataString","stringify","sig","signString","decoded","Buffer","toString","unsigned","key","hmac","createHmac","update","digest","module","exports"],"sources":["/Users/megnabiederman/node_modules/opentok-token/index.js"],"sourcesContent":["var crypto = require('crypto');\nvar querystring = require('querystring');\nvar timestamp = require('unix-timestamp');\nvar nonce = require('nonce')();\nvar _ = require('lodash');\n\n/**\n * @constant {string}\n * @private\n */\nvar TOKEN_SENTINEL = 'T1==';\n\n/**\n * @typedef {Object} TokenData\n * @property {string} [session_id] An OpenTok Session ID\n * @property {number} [create_time] Creation time of token as unix timestamp (Default: now)\n * @property {number} [expire_time] Expiration time of token as unix timestamp (Default: one day\n * from now)\n * @property {number} [nonce] Arbitrary number used only once in a cryptographic communication\n * (Default: unique random number)\n * @property {string} [role='publisher'] \"publisher\" or \"subscriber\" \"moderator\"\n * @property {string} [connection_data] Arbitrary data to be made available in clients on the OpenTok Connection\n */\n\n\n/**\n * Encodes data for use as a token that can be used as the X-TB-TOKEN-AUTH header value in OpenTok REST APIs\n *\n * @exports opentok-token\n *\n * @param {TokenData} tokenData\n * @param {string} apiKey An OpenTok API Key\n * @param {string} apiSecret An OpenTok API Secret\n *\n * @returns {string} token\n */\nvar encodeToken = function(tokenData, apiKey, apiSecret) {\n\n  // Prevent mutating value passed in\n  tokenData = _.clone(tokenData);\n\n  _.defaults(tokenData, {\n    create_time: Math.round(timestamp.now()),\n    expire_time: Math.round(timestamp.now('1d')),\n    nonce: nonce(),\n    role: 'publisher'\n  });\n\n  var dataString = querystring.stringify(tokenData),\n      sig = signString(dataString, apiSecret),\n      decoded = new Buffer(\"partner_id=\"+apiKey+\"&sig=\"+sig+\":\"+dataString, 'utf8');\n  return TOKEN_SENTINEL + decoded.toString('base64');\n};\n\n\n/**\n * Creates an HMAC-SHA1 signature of unsigned data using the key\n *\n * @private\n *\n * @param {string} unsigned Data to be signed\n * @param {string} key Key to sign data with\n *\n * @returns {string} signature\n */\nvar signString = function(unsigned, key) {\n  var hmac = crypto.createHmac('sha1', key);\n  hmac.update(unsigned);\n  return hmac.digest('hex');\n};\n\n\nmodule.exports = encodeToken;\n\n"],"mappings":"AAAA,IAAIA,MAAM,GAAGC,OAAO,CAAC,QAAD,CAApB;;AACA,IAAIC,WAAW,GAAGD,OAAO,CAAC,aAAD,CAAzB;;AACA,IAAIE,SAAS,GAAGF,OAAO,CAAC,gBAAD,CAAvB;;AACA,IAAIG,KAAK,GAAGH,OAAO,CAAC,OAAD,CAAP,EAAZ;;AACA,IAAII,CAAC,GAAGJ,OAAO,CAAC,QAAD,CAAf;AAEA;AACA;AACA;AACA;;;AACA,IAAIK,cAAc,GAAG,MAArB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,IAAIC,WAAW,GAAG,UAASC,SAAT,EAAoBC,MAApB,EAA4BC,SAA5B,EAAuC;EAEvD;EACAF,SAAS,GAAGH,CAAC,CAACM,KAAF,CAAQH,SAAR,CAAZ;;EAEAH,CAAC,CAACO,QAAF,CAAWJ,SAAX,EAAsB;IACpBK,WAAW,EAAEC,IAAI,CAACC,KAAL,CAAWZ,SAAS,CAACa,GAAV,EAAX,CADO;IAEpBC,WAAW,EAAEH,IAAI,CAACC,KAAL,CAAWZ,SAAS,CAACa,GAAV,CAAc,IAAd,CAAX,CAFO;IAGpBZ,KAAK,EAAEA,KAAK,EAHQ;IAIpBc,IAAI,EAAE;EAJc,CAAtB;;EAOA,IAAIC,UAAU,GAAGjB,WAAW,CAACkB,SAAZ,CAAsBZ,SAAtB,CAAjB;EAAA,IACIa,GAAG,GAAGC,UAAU,CAACH,UAAD,EAAaT,SAAb,CADpB;EAAA,IAEIa,OAAO,GAAG,IAAIC,MAAJ,CAAW,gBAAcf,MAAd,GAAqB,OAArB,GAA6BY,GAA7B,GAAiC,GAAjC,GAAqCF,UAAhD,EAA4D,MAA5D,CAFd;EAGA,OAAOb,cAAc,GAAGiB,OAAO,CAACE,QAAR,CAAiB,QAAjB,CAAxB;AACD,CAhBD;AAmBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,IAAIH,UAAU,GAAG,UAASI,QAAT,EAAmBC,GAAnB,EAAwB;EACvC,IAAIC,IAAI,GAAG5B,MAAM,CAAC6B,UAAP,CAAkB,MAAlB,EAA0BF,GAA1B,CAAX;EACAC,IAAI,CAACE,MAAL,CAAYJ,QAAZ;EACA,OAAOE,IAAI,CAACG,MAAL,CAAY,KAAZ,CAAP;AACD,CAJD;;AAOAC,MAAM,CAACC,OAAP,GAAiB1B,WAAjB"},"metadata":{},"sourceType":"script"}