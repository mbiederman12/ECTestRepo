{"ast":null,"code":"/* global require, exports */\n\n/* jshint strict:false, eqnull:true */\n\n/**\n* An object representing an OpenTok live streaming broadcast.\n* <p>\n* Do not call the <code>new()</code> constructor. To start a live streaming broadcast, call the\n* {@link OpenTok#startBroadcast OpenTok.startBroadcast()} method.\n*\n* @property {String} id\n*   The broadcast ID.\n* @property {String} sessionId\n*   The session ID of the OpenTok session associated with this broadcast.\n* @property {String} projectId\n*   The API key associated with the broadcast.\n* @property {Number} createdAt\n*   The time at which the broadcast was created, in milliseconds since the UNIX epoch.\n* @property {String} resolution\n*   The resolution of the broadcast: one of the following:\n*   <ul>\n*     <li>\"640x480\"</li>\n*     <li>\"1280x720\"</li>\n*     <li>\"1920x1080\"</li>\n*     <li>\"480x640\"</li>\n*     <li>\"720x1280\"</li>\n*     <li>\"1080x1920\"</li>\n*   </ul>\n*   You may want to use a portrait aspect ratio for broadcasts that include video streams from\n*   mobile devices (which often use the portrait aspect ratio). This property is optional.\n* @property {Object} broadcastUrls\n*   An object containing details about the HLS and RTMP broadcasts.\n*   <p>\n*   <ul>\n*     <li>\n*       <code>hls</code> (String) &mdash; If you specified an HLS endpoint, the object includes\n*       an hls property, which is set to the URL for the HLS broadcast. Note this HLS broadcast\n*       URL points to an index file, an .M3U8-formatted playlist that contains a list of URLs to\n*       .ts media segment files (MPEG-2 transport stream files). While the URLs of both the\n*       playlist index file and media segment files are provided as soon as the HTTP response\n*       is returned, these URLs should not be accessed until 15 – 20 seconds later, after the\n*       initiation of the HLS broadcast, due to the delay between the HLS broadcast and the live\n*       streams in the OpenTok session.\n*       See https://developer.apple.com/library/ios/technotes/tn2288/_index.html for more\n*       information about the playlist index file and media segment files for HLS.\n*     </li>\n*     <li>\n*       <code>rtmp</code> (Object Array) &mdash; If you specified RTMP stream endpoints,\n*       the object includes an rtmp property. This is an array of objects that include\n*       information on each of the RTMP streams.\n*       Each of these objects has the following properties:\n*       <ul>\n*         <li><code>id</code> The ID you assigned to the RTMP stream</li>\n*         <li><code>serverUrl</code> The server URL</li>\n*         <li><code>streamName</code> The stream name</li>\n*         <li><code>status</code> The status of the stream</li>\n*       </ul>\n*     </li>\n*   </ul>\n* @property {Number} maxDuration\n*   The maximum time allowed for the broadcast, in seconds.\n*   After this time, the broadcast will be stopped automatically, if it is still started.\n*\n* @property {String} streamMode\n*   The stream mode for the broadcast. This can be set to one of the the following:\n*\n*   <ul>\n*     <li> \"auto\" &mdash; Streams included in the broadcast are selected automatically\n*     (the default).</li>\n*\n*     <li> \"manual\" &mdash; Specify streams to be included based on calls to the\n*    {@link OpenTok#addBroadcastStream OpenTok.addBroadcastStream()} and\n*    {@link OpenTok#removeBroadcastStream OpenTok.removeBroadcastStream()} methods.</li>\n*   </ul>\n*\n* @property {Array} streams\n*   An array of objects corresponding to streams currently being broadcast.\n*   This is only set for a broadcast with the status set to \"started\" and\n*   the streamMode set to \"manual\". Each object in the array includes the following properties:\n*   <ul>\n*     <li><code>streamId</code> -- The stream ID of the stream included in the broadcast.\n*     <li><code>hasAudio</code> -- Whether the stream's audio is included in the broadcast.\n*     <li><code>hasVideo</code> -- Whether the stream's video is included in the broadcast.\n*   </ul>\n* @see {@link OpenTok#getBroadcast OpenTok.getBroadcast()}\n* @see {@link OpenTok#startBroadcast OpenTok.startBroadcast()}\n* @see {@link OpenTok#stopBroadcast OpenTok.stopBroadcast()}\n*\n* @class Broadcast\n*/\nvar Broadcast = function Broadcast(client, json) {\n  var properties = JSON.parse(json);\n  var hasProp = {}.hasOwnProperty;\n  var id = properties.id;\n  var key;\n\n  for (key in properties) {\n    if (hasProp.call(properties, key) && key !== 'event' && key !== 'partnerId') {\n      this[key] = properties[key];\n    }\n  }\n  /**\n  * Stops the live streaming broadcast.\n  * <p>\n  * Broadcasts automatically stop recording after 120 minutes or when all clients have disconnected\n  * from the session being broadcast.\n  *\n  * @param callback {Function} The function to call upon completing the operation. Two arguments\n  * are passed to the function:\n  *\n  * <ul>\n  *\n  *   <li>\n  *      <code>error</code> &mdash; An error object (if the call to the method fails).\n  *   </li>\n  *\n  *   <li>\n  *       <code>broadcast</code> &mdash; The Broadcast object.\n  *   </li>\n  *\n  * </ul>\n  *\n  * @method #stop\n  * @memberof Broadcast\n  */\n\n\n  this.stop = function (callback) {\n    client.stopBroadcast(id, function (err, response) {\n      if (err) {\n        return callback(new Error('Failed to stop broadcast. ' + err));\n      }\n\n      return callback(null, new Broadcast(client, response));\n    });\n  };\n};\n\nmodule.exports = Broadcast;","map":{"version":3,"names":["Broadcast","client","json","properties","JSON","parse","hasProp","hasOwnProperty","id","key","call","stop","callback","stopBroadcast","err","response","Error","module","exports"],"sources":["/Users/megnabiederman/node_modules/opentok/lib/broadcast.js"],"sourcesContent":["/* global require, exports */\n/* jshint strict:false, eqnull:true */\n\n/**\n* An object representing an OpenTok live streaming broadcast.\n* <p>\n* Do not call the <code>new()</code> constructor. To start a live streaming broadcast, call the\n* {@link OpenTok#startBroadcast OpenTok.startBroadcast()} method.\n*\n* @property {String} id\n*   The broadcast ID.\n* @property {String} sessionId\n*   The session ID of the OpenTok session associated with this broadcast.\n* @property {String} projectId\n*   The API key associated with the broadcast.\n* @property {Number} createdAt\n*   The time at which the broadcast was created, in milliseconds since the UNIX epoch.\n* @property {String} resolution\n*   The resolution of the broadcast: one of the following:\n*   <ul>\n*     <li>\"640x480\"</li>\n*     <li>\"1280x720\"</li>\n*     <li>\"1920x1080\"</li>\n*     <li>\"480x640\"</li>\n*     <li>\"720x1280\"</li>\n*     <li>\"1080x1920\"</li>\n*   </ul>\n*   You may want to use a portrait aspect ratio for broadcasts that include video streams from\n*   mobile devices (which often use the portrait aspect ratio). This property is optional.\n* @property {Object} broadcastUrls\n*   An object containing details about the HLS and RTMP broadcasts.\n*   <p>\n*   <ul>\n*     <li>\n*       <code>hls</code> (String) &mdash; If you specified an HLS endpoint, the object includes\n*       an hls property, which is set to the URL for the HLS broadcast. Note this HLS broadcast\n*       URL points to an index file, an .M3U8-formatted playlist that contains a list of URLs to\n*       .ts media segment files (MPEG-2 transport stream files). While the URLs of both the\n*       playlist index file and media segment files are provided as soon as the HTTP response\n*       is returned, these URLs should not be accessed until 15 – 20 seconds later, after the\n*       initiation of the HLS broadcast, due to the delay between the HLS broadcast and the live\n*       streams in the OpenTok session.\n*       See https://developer.apple.com/library/ios/technotes/tn2288/_index.html for more\n*       information about the playlist index file and media segment files for HLS.\n*     </li>\n*     <li>\n*       <code>rtmp</code> (Object Array) &mdash; If you specified RTMP stream endpoints,\n*       the object includes an rtmp property. This is an array of objects that include\n*       information on each of the RTMP streams.\n*       Each of these objects has the following properties:\n*       <ul>\n*         <li><code>id</code> The ID you assigned to the RTMP stream</li>\n*         <li><code>serverUrl</code> The server URL</li>\n*         <li><code>streamName</code> The stream name</li>\n*         <li><code>status</code> The status of the stream</li>\n*       </ul>\n*     </li>\n*   </ul>\n* @property {Number} maxDuration\n*   The maximum time allowed for the broadcast, in seconds.\n*   After this time, the broadcast will be stopped automatically, if it is still started.\n*\n* @property {String} streamMode\n*   The stream mode for the broadcast. This can be set to one of the the following:\n*\n*   <ul>\n*     <li> \"auto\" &mdash; Streams included in the broadcast are selected automatically\n*     (the default).</li>\n*\n*     <li> \"manual\" &mdash; Specify streams to be included based on calls to the\n*    {@link OpenTok#addBroadcastStream OpenTok.addBroadcastStream()} and\n*    {@link OpenTok#removeBroadcastStream OpenTok.removeBroadcastStream()} methods.</li>\n*   </ul>\n*\n* @property {Array} streams\n*   An array of objects corresponding to streams currently being broadcast.\n*   This is only set for a broadcast with the status set to \"started\" and\n*   the streamMode set to \"manual\". Each object in the array includes the following properties:\n*   <ul>\n*     <li><code>streamId</code> -- The stream ID of the stream included in the broadcast.\n*     <li><code>hasAudio</code> -- Whether the stream's audio is included in the broadcast.\n*     <li><code>hasVideo</code> -- Whether the stream's video is included in the broadcast.\n*   </ul>\n* @see {@link OpenTok#getBroadcast OpenTok.getBroadcast()}\n* @see {@link OpenTok#startBroadcast OpenTok.startBroadcast()}\n* @see {@link OpenTok#stopBroadcast OpenTok.stopBroadcast()}\n*\n* @class Broadcast\n*/\nvar Broadcast = function Broadcast(client, json) {\n  var properties = JSON.parse(json);\n  var hasProp = {}.hasOwnProperty;\n  var id = properties.id;\n  var key;\n\n  for (key in properties) {\n    if (hasProp.call(properties, key) && key !== 'event' && key !== 'partnerId') {\n      this[key] = properties[key];\n    }\n  }\n\n  /**\n  * Stops the live streaming broadcast.\n  * <p>\n  * Broadcasts automatically stop recording after 120 minutes or when all clients have disconnected\n  * from the session being broadcast.\n  *\n  * @param callback {Function} The function to call upon completing the operation. Two arguments\n  * are passed to the function:\n  *\n  * <ul>\n  *\n  *   <li>\n  *      <code>error</code> &mdash; An error object (if the call to the method fails).\n  *   </li>\n  *\n  *   <li>\n  *       <code>broadcast</code> &mdash; The Broadcast object.\n  *   </li>\n  *\n  * </ul>\n  *\n  * @method #stop\n  * @memberof Broadcast\n  */\n  this.stop = function (callback) {\n    client.stopBroadcast(id, function (err, response) {\n      if (err) {\n        return callback(new Error('Failed to stop broadcast. ' + err));\n      }\n      return callback(null, new Broadcast(client, response));\n    });\n  };\n};\n\nmodule.exports = Broadcast;\n\n"],"mappings":"AAAA;;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAIA,SAAS,GAAG,SAASA,SAAT,CAAmBC,MAAnB,EAA2BC,IAA3B,EAAiC;EAC/C,IAAIC,UAAU,GAAGC,IAAI,CAACC,KAAL,CAAWH,IAAX,CAAjB;EACA,IAAII,OAAO,GAAG,GAAGC,cAAjB;EACA,IAAIC,EAAE,GAAGL,UAAU,CAACK,EAApB;EACA,IAAIC,GAAJ;;EAEA,KAAKA,GAAL,IAAYN,UAAZ,EAAwB;IACtB,IAAIG,OAAO,CAACI,IAAR,CAAaP,UAAb,EAAyBM,GAAzB,KAAiCA,GAAG,KAAK,OAAzC,IAAoDA,GAAG,KAAK,WAAhE,EAA6E;MAC3E,KAAKA,GAAL,IAAYN,UAAU,CAACM,GAAD,CAAtB;IACD;EACF;EAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;EACE,KAAKE,IAAL,GAAY,UAAUC,QAAV,EAAoB;IAC9BX,MAAM,CAACY,aAAP,CAAqBL,EAArB,EAAyB,UAAUM,GAAV,EAAeC,QAAf,EAAyB;MAChD,IAAID,GAAJ,EAAS;QACP,OAAOF,QAAQ,CAAC,IAAII,KAAJ,CAAU,+BAA+BF,GAAzC,CAAD,CAAf;MACD;;MACD,OAAOF,QAAQ,CAAC,IAAD,EAAO,IAAIZ,SAAJ,CAAcC,MAAd,EAAsBc,QAAtB,CAAP,CAAf;IACD,CALD;EAMD,CAPD;AAQD,CA5CD;;AA8CAE,MAAM,CAACC,OAAP,GAAiBlB,SAAjB"},"metadata":{},"sourceType":"script"}