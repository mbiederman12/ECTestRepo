{"ast":null,"code":"/**\n * Tiny library to create and manipulate Unix timestamps\n * (i.e. defined as the number of seconds since Unix epoch time).\n */\nvar timestamp = module.exports = {}; // constants\n\ntimestamp.Millisecond = 0.001;\ntimestamp.Second = 1;\ntimestamp.Minute = 60;\ntimestamp.Hour = 60 * timestamp.Minute;\ntimestamp.Day = 24 * timestamp.Hour;\ntimestamp.Week = 7 * timestamp.Day;\n/**\n * = mean Gregorian month\n */\n\ntimestamp.Month = 30.436875 * timestamp.Day;\ntimestamp.Year = 12 * timestamp.Month;\nvar DeltaRegExp = new RegExp('^\\\\s*' + '([-+]?)\\\\s*' + ['y', 'M', 'w', 'd', 'h', 'm', 's', 'ms'].map(function (t) {\n  return '(?:(\\\\d+)\\\\s*' + t + ')?';\n}).join('\\\\s*') + '\\\\s*$');\n/**\n * Gets the current time as Unix timestamp.\n * Optionally applying a given delta specified as either a human-readable string or a number of\n * seconds.\n *\n * @param {String|Number} delta The optional delta time to apply\n * @returns {Number} The corresponding timestamp\n */\n\ntimestamp.now = function (delta) {\n  var now = Date.now() / 1000;\n  return delta ? timestamp.add(now, delta) : now;\n};\n/**\n * Applies the given delta to the given timestamp.\n * The delta is specified as either a human-readable string or a number of\n * seconds.\n *\n * @param {Number} time The original timestamp\n * @param {String|Number} delta The delta time to apply\n * @returns {Number} The result timestamp\n */\n\n\ntimestamp.add = function (time, delta) {\n  if (!isNumber(time)) {\n    throw new Error('Time must be a number');\n  }\n\n  if (isString(delta)) {\n    var matches = DeltaRegExp.exec(delta);\n\n    if (!matches) {\n      throw new Error('Expected delta string format: [+|-] [{years}y] [{months}M] [{weeks}w] ' + '[{days}d] [{hours}h] [{minutes}m] [{seconds}s] [{milliseconds}ms]');\n    }\n\n    delta = (matches[1] === '-' ? -1 : 1) * ((matches[2] || 0) * timestamp.Year + (matches[3] || 0) * timestamp.Month + (matches[4] || 0) * timestamp.Week + (matches[5] || 0) * timestamp.Day + (matches[6] || 0) * timestamp.Hour + (matches[7] || 0) * timestamp.Minute + (matches[8] || 0) * timestamp.Second + (matches[9] || 0) * timestamp.Millisecond);\n  } else if (!isNumber(delta)) {\n    throw new Error('Delta must be either a string or a number');\n  }\n\n  return time + delta;\n};\n/**\n * Gets the delta timestamp for the given delta string.\n * (Alias for .add() using a time of zero.)\n *\n * @param {String|Number} delta The delta time for the duration\n * @returns {Number} The result time delta\n */\n\n\ntimestamp.duration = function (delta) {\n  return timestamp.add(0, delta);\n};\n/**\n * Gets the Unix timestamp for the given date object or string.\n *\n * @param {Date|String} date A date object or an ISO 8601 date string\n * @returns {Number} The corresponding timestamp\n */\n\n\ntimestamp.fromDate = function (date) {\n  if (isString(date)) {\n    date = new Date(date);\n  } else if (!isDate(date)) {\n    throw new Error('Expected either a string or a date');\n  }\n\n  return date.getTime() / 1000;\n};\n/**\n * Gets the date for the given Unix timestamp.\n *\n * @param {Number} time A timestamp\n * @returns {Date} The corresponding date\n */\n\n\ntimestamp.toDate = function (time) {\n  if (!isNumber(time)) {\n    throw new Error('Expected a number');\n  }\n\n  return new Date(time * 1000);\n};\n\nfunction isString(value) {\n  return typeof value === 'string' || Object.prototype.toString.call(value) === '[object String]';\n}\n\nfunction isNumber(value) {\n  return typeof value === 'number' || Object.prototype.toString.call(value) === '[object Number]';\n}\n\nfunction isDate(value) {\n  return Object.prototype.toString.call(value) === '[object Date]';\n}","map":{"version":3,"names":["timestamp","module","exports","Millisecond","Second","Minute","Hour","Day","Week","Month","Year","DeltaRegExp","RegExp","map","t","join","now","delta","Date","add","time","isNumber","Error","isString","matches","exec","duration","fromDate","date","isDate","getTime","toDate","value","Object","prototype","toString","call"],"sources":["/Users/megnabiederman/node_modules/unix-timestamp/lib/timestamp.js"],"sourcesContent":["/**\n * Tiny library to create and manipulate Unix timestamps\n * (i.e. defined as the number of seconds since Unix epoch time).\n */\n\nvar timestamp = module.exports = {};\n\n// constants\n\ntimestamp.Millisecond = 0.001;\ntimestamp.Second = 1;\ntimestamp.Minute = 60;\ntimestamp.Hour = 60 * timestamp.Minute;\ntimestamp.Day = 24 * timestamp.Hour;\ntimestamp.Week = 7 * timestamp.Day;\n/**\n * = mean Gregorian month\n */\ntimestamp.Month = 30.436875 * timestamp.Day;\ntimestamp.Year = 12 * timestamp.Month;\n\nvar DeltaRegExp = new RegExp('^\\\\s*' +\n    '([-+]?)\\\\s*' +\n    [ 'y', 'M', 'w', 'd', 'h', 'm', 's', 'ms' ]\n        .map(function (t) { return '(?:(\\\\d+)\\\\s*' + t + ')?'; })\n        .join('\\\\s*') +\n    '\\\\s*$');\n\n/**\n * Gets the current time as Unix timestamp.\n * Optionally applying a given delta specified as either a human-readable string or a number of\n * seconds.\n *\n * @param {String|Number} delta The optional delta time to apply\n * @returns {Number} The corresponding timestamp\n */\ntimestamp.now = function (delta) {\n  var now = Date.now() / 1000;\n  return delta ? timestamp.add(now, delta) : now;\n};\n\n/**\n * Applies the given delta to the given timestamp.\n * The delta is specified as either a human-readable string or a number of\n * seconds.\n *\n * @param {Number} time The original timestamp\n * @param {String|Number} delta The delta time to apply\n * @returns {Number} The result timestamp\n */\ntimestamp.add = function (time, delta) {\n  if (! isNumber(time)) {\n    throw new Error('Time must be a number');\n  }\n  if (isString(delta)) {\n    var matches = DeltaRegExp.exec(delta);\n    if (! matches) {\n      throw new Error('Expected delta string format: [+|-] [{years}y] [{months}M] [{weeks}w] ' +\n          '[{days}d] [{hours}h] [{minutes}m] [{seconds}s] [{milliseconds}ms]');\n    }\n    delta = (matches[1] === '-' ? -1 : 1) * (\n        (matches[2] || 0) * timestamp.Year +\n        (matches[3] || 0) * timestamp.Month +\n        (matches[4] || 0) * timestamp.Week +\n        (matches[5] || 0) * timestamp.Day +\n        (matches[6] || 0) * timestamp.Hour +\n        (matches[7] || 0) * timestamp.Minute +\n        (matches[8] || 0) * timestamp.Second +\n        (matches[9] || 0) * timestamp.Millisecond\n    );\n  } else if (! isNumber(delta)) {\n    throw new Error('Delta must be either a string or a number');\n  }\n  return time + delta;\n};\n\n/**\n * Gets the delta timestamp for the given delta string.\n * (Alias for .add() using a time of zero.)\n *\n * @param {String|Number} delta The delta time for the duration\n * @returns {Number} The result time delta\n */\ntimestamp.duration = function (delta) {\n  return timestamp.add(0, delta);\n};\n\n/**\n * Gets the Unix timestamp for the given date object or string.\n *\n * @param {Date|String} date A date object or an ISO 8601 date string\n * @returns {Number} The corresponding timestamp\n */\ntimestamp.fromDate = function (date) {\n  if (isString(date)) {\n    date = new Date(date);\n  } else if (! isDate(date)) {\n    throw new Error('Expected either a string or a date');\n  }\n  return date.getTime() / 1000;\n};\n\n/**\n * Gets the date for the given Unix timestamp.\n *\n * @param {Number} time A timestamp\n * @returns {Date} The corresponding date\n */\ntimestamp.toDate = function (time) {\n  if (! isNumber(time)) {\n    throw new Error('Expected a number');\n  }\n  return new Date(time * 1000);\n};\n\nfunction isString(value) {\n  return typeof value === 'string' || Object.prototype.toString.call(value) === '[object String]';\n}\n\nfunction isNumber(value) {\n  return typeof value === 'number' || Object.prototype.toString.call(value) === '[object Number]';\n}\n\nfunction isDate(value) {\n  return Object.prototype.toString.call(value) === '[object Date]';\n}\n"],"mappings":"AAAA;AACA;AACA;AACA;AAEA,IAAIA,SAAS,GAAGC,MAAM,CAACC,OAAP,GAAiB,EAAjC,C,CAEA;;AAEAF,SAAS,CAACG,WAAV,GAAwB,KAAxB;AACAH,SAAS,CAACI,MAAV,GAAmB,CAAnB;AACAJ,SAAS,CAACK,MAAV,GAAmB,EAAnB;AACAL,SAAS,CAACM,IAAV,GAAiB,KAAKN,SAAS,CAACK,MAAhC;AACAL,SAAS,CAACO,GAAV,GAAgB,KAAKP,SAAS,CAACM,IAA/B;AACAN,SAAS,CAACQ,IAAV,GAAiB,IAAIR,SAAS,CAACO,GAA/B;AACA;AACA;AACA;;AACAP,SAAS,CAACS,KAAV,GAAkB,YAAYT,SAAS,CAACO,GAAxC;AACAP,SAAS,CAACU,IAAV,GAAiB,KAAKV,SAAS,CAACS,KAAhC;AAEA,IAAIE,WAAW,GAAG,IAAIC,MAAJ,CAAW,UACzB,aADyB,GAEzB,CAAE,GAAF,EAAO,GAAP,EAAY,GAAZ,EAAiB,GAAjB,EAAsB,GAAtB,EAA2B,GAA3B,EAAgC,GAAhC,EAAqC,IAArC,EACKC,GADL,CACS,UAAUC,CAAV,EAAa;EAAE,OAAO,kBAAkBA,CAAlB,GAAsB,IAA7B;AAAoC,CAD5D,EAEKC,IAFL,CAEU,MAFV,CAFyB,GAKzB,OALc,CAAlB;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACAf,SAAS,CAACgB,GAAV,GAAgB,UAAUC,KAAV,EAAiB;EAC/B,IAAID,GAAG,GAAGE,IAAI,CAACF,GAAL,KAAa,IAAvB;EACA,OAAOC,KAAK,GAAGjB,SAAS,CAACmB,GAAV,CAAcH,GAAd,EAAmBC,KAAnB,CAAH,GAA+BD,GAA3C;AACD,CAHD;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACAhB,SAAS,CAACmB,GAAV,GAAgB,UAAUC,IAAV,EAAgBH,KAAhB,EAAuB;EACrC,IAAI,CAAEI,QAAQ,CAACD,IAAD,CAAd,EAAsB;IACpB,MAAM,IAAIE,KAAJ,CAAU,uBAAV,CAAN;EACD;;EACD,IAAIC,QAAQ,CAACN,KAAD,CAAZ,EAAqB;IACnB,IAAIO,OAAO,GAAGb,WAAW,CAACc,IAAZ,CAAiBR,KAAjB,CAAd;;IACA,IAAI,CAAEO,OAAN,EAAe;MACb,MAAM,IAAIF,KAAJ,CAAU,2EACZ,mEADE,CAAN;IAED;;IACDL,KAAK,GAAG,CAACO,OAAO,CAAC,CAAD,CAAP,KAAe,GAAf,GAAqB,CAAC,CAAtB,GAA0B,CAA3B,KACJ,CAACA,OAAO,CAAC,CAAD,CAAP,IAAc,CAAf,IAAoBxB,SAAS,CAACU,IAA9B,GACA,CAACc,OAAO,CAAC,CAAD,CAAP,IAAc,CAAf,IAAoBxB,SAAS,CAACS,KAD9B,GAEA,CAACe,OAAO,CAAC,CAAD,CAAP,IAAc,CAAf,IAAoBxB,SAAS,CAACQ,IAF9B,GAGA,CAACgB,OAAO,CAAC,CAAD,CAAP,IAAc,CAAf,IAAoBxB,SAAS,CAACO,GAH9B,GAIA,CAACiB,OAAO,CAAC,CAAD,CAAP,IAAc,CAAf,IAAoBxB,SAAS,CAACM,IAJ9B,GAKA,CAACkB,OAAO,CAAC,CAAD,CAAP,IAAc,CAAf,IAAoBxB,SAAS,CAACK,MAL9B,GAMA,CAACmB,OAAO,CAAC,CAAD,CAAP,IAAc,CAAf,IAAoBxB,SAAS,CAACI,MAN9B,GAOA,CAACoB,OAAO,CAAC,CAAD,CAAP,IAAc,CAAf,IAAoBxB,SAAS,CAACG,WAR1B,CAAR;EAUD,CAhBD,MAgBO,IAAI,CAAEkB,QAAQ,CAACJ,KAAD,CAAd,EAAuB;IAC5B,MAAM,IAAIK,KAAJ,CAAU,2CAAV,CAAN;EACD;;EACD,OAAOF,IAAI,GAAGH,KAAd;AACD,CAxBD;AA0BA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACAjB,SAAS,CAAC0B,QAAV,GAAqB,UAAUT,KAAV,EAAiB;EACpC,OAAOjB,SAAS,CAACmB,GAAV,CAAc,CAAd,EAAiBF,KAAjB,CAAP;AACD,CAFD;AAIA;AACA;AACA;AACA;AACA;AACA;;;AACAjB,SAAS,CAAC2B,QAAV,GAAqB,UAAUC,IAAV,EAAgB;EACnC,IAAIL,QAAQ,CAACK,IAAD,CAAZ,EAAoB;IAClBA,IAAI,GAAG,IAAIV,IAAJ,CAASU,IAAT,CAAP;EACD,CAFD,MAEO,IAAI,CAAEC,MAAM,CAACD,IAAD,CAAZ,EAAoB;IACzB,MAAM,IAAIN,KAAJ,CAAU,oCAAV,CAAN;EACD;;EACD,OAAOM,IAAI,CAACE,OAAL,KAAiB,IAAxB;AACD,CAPD;AASA;AACA;AACA;AACA;AACA;AACA;;;AACA9B,SAAS,CAAC+B,MAAV,GAAmB,UAAUX,IAAV,EAAgB;EACjC,IAAI,CAAEC,QAAQ,CAACD,IAAD,CAAd,EAAsB;IACpB,MAAM,IAAIE,KAAJ,CAAU,mBAAV,CAAN;EACD;;EACD,OAAO,IAAIJ,IAAJ,CAASE,IAAI,GAAG,IAAhB,CAAP;AACD,CALD;;AAOA,SAASG,QAAT,CAAkBS,KAAlB,EAAyB;EACvB,OAAO,OAAOA,KAAP,KAAiB,QAAjB,IAA6BC,MAAM,CAACC,SAAP,CAAiBC,QAAjB,CAA0BC,IAA1B,CAA+BJ,KAA/B,MAA0C,iBAA9E;AACD;;AAED,SAASX,QAAT,CAAkBW,KAAlB,EAAyB;EACvB,OAAO,OAAOA,KAAP,KAAiB,QAAjB,IAA6BC,MAAM,CAACC,SAAP,CAAiBC,QAAjB,CAA0BC,IAA1B,CAA+BJ,KAA/B,MAA0C,iBAA9E;AACD;;AAED,SAASH,MAAT,CAAgBG,KAAhB,EAAuB;EACrB,OAAOC,MAAM,CAACC,SAAP,CAAiBC,QAAjB,CAA0BC,IAA1B,CAA+BJ,KAA/B,MAA0C,eAAjD;AACD"},"metadata":{},"sourceType":"script"}